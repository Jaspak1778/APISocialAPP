@page "/info"
@inject DeviceInfoService DeviceInfoService
@inject User User
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject CsrfService CsrfService

<h3>InfoTab</h3>
<h4>IP Adress</h4>
<p>@DeviceInfoService.IPAddress</p>
<h4>USER INFO:</h4>
<p>User ID: @User.id</p>
<p>User Logged : @User.IsLoggedIn</p>
<p>User Logged : @User.username</p>

<Button Color="ButtonColor.Danger" @onclick="LogOut"> Kirjaudu ulos </Button>

@code {

    private const string RequestUri = "http://192.168.238.225:8000/api/logout/";
    private string? Message;
  
    private async Task LogOut()
    {
        // Hakee CSRF-tokenin CsrfServicestä
        var csrfToken = await CsrfService.GetCsrfTokenAsync();

        var json = JsonConvert.SerializeObject("");
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        // Lisätään CSRF token headeriin
        content.Headers.Add("X-CSRFToken", csrfToken);

        var response = await HttpClient.PostAsync(RequestUri, content);

        if (response.IsSuccessStatusCode)
        {
            // Varmistetaan, että CSRF-token päivittyy ennen seuraavaa API-pyyntöä
            await RefreshCsrfToken();

            // Lataa sovellus uudelleen
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            Console.WriteLine("Pyyntö epäonnistui.");
        }
    }

    private async Task RefreshCsrfToken()
    {
        //Varmistetaan että CSRF on poistettu ja uudistettu jotta sessio päättyy varmemmin
        var csrfToken = await CsrfService.GetCsrfTokenAsync();
        HttpClient.DefaultRequestHeaders.Remove("X-CSRFToken"); // poista vanha token
        HttpClient.DefaultRequestHeaders.Add("X-CSRFToken", csrfToken); // Lisää uusi token
    }
}