@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject User User



<style>
    #pass {
        margin-top: 6px;
    }

    button {
        width: 12rem;
    }

    .custom-button {
        color: white;
        background: rgb(63,94,251);
        background: linear-gradient(90deg, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);
        border-color: inherit;
        border-radius: 6px;
        border-style: none;
    }

    h1 {
        font-family: Georgia Bold Italic;
    }

    .boxelement {
        border-color: blue;
        border-radius: 12px;
        background-color: ghostwhite;
        max-width: 300px; /* Kaventaa elementin */
        margin: auto; /* Keskittää elementin */
        padding: 1rem; /* Lisää pehmustetta */
    }

    .input-container {
        position: relative;
        margin-top: 1.5rem;
    }

        .input-container label {
            position: absolute;
            top: -0.7rem;
            left: 0.75rem;
            background-color: ghostwhite;
            padding: 0 0.3rem;
            font-size: 0.85rem;
            color: blue;
        }

        .input-container input {
            border: 2px solid blue;
            border-radius: 12px;
            padding: 0.6rem;
            width: 100%;
            font-size: 1rem;
            box-sizing: border-box;
        }
</style>

<center>
    <div class="container-fluid boxelement">
        <h1>Kirjaudu</h1>
        <br />
        <EditForm Model="this" OnValidSubmit="Logins">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-container">
                <label for="user">Käyttäjänimi</label>
                <InputText id="user" class="box" @bind-Value="username" @onmouseover="() => showFail = false" placeholder=" " required />
            </div>
            <div class="input-container">
                <label for="pass">Salasanasi</label>
                <InputText id="pass" type="password" @bind-Value="password" placeholder=" " required />
            </div>
            <div class="flex-lg-wrap">
                <button class="custom-button" id="pass" type="submit">
                    Kirjaudu
                </button>
            </div>
        </EditForm>
        <br />
        <div id="pass">
            <a style="color:dodgerblue; width:auto" class="btn btn-link" href="signup">Uusi käyttäjä? Luo tunnukset</a>
        </div>
    </div>

    <br />
    <div>
        @if (showFail)
        {
            <div><Alert Color="AlertColor.Danger">@success</Alert></div>
        }
    </div>
</center>

@code {


    //Django Rest API Backendille
    //osoitteet riippuen laitteesta
    // ipconfig , IPV4 jos ajaa paikallisella laitteella http : / / oma ip :8000/api/endpoint
    // http ://192.168.180.225:8000/api/  : Windows machine
    // http ://10.0.2.2:8000/api/        : Emulator

    private string? username;
    private string? password;
    private string? success;
    private bool showSuccess = false;
    private bool showFail = false;

    //LOGIN URI

    private const string RequestUri = "http://127.0.0.1:8000/api/login/";

    //USERS URI

    private const string UsersUri = "http://127.0.0.1:8000/api/users/";                     




    private async Task Logins()
    {

        var loginData = new

        {
            username = username,
            password = password
        };

        var json = JsonConvert.SerializeObject(loginData);
        var response = await HttpClient.PostAsync(RequestUri,
            new StringContent(json, Encoding.UTF8, "application/json"));
        if (response.IsSuccessStatusCode)

        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var user = JsonConvert.DeserializeObject<User>(responseContent);
            if (user != null)

            {   

                showSuccess = true;
                success = "Kirjauduttu sisään..";
                User.ShowAlert = true;
                await FetchUserDetails();

            }
            else

            {
                showFail = true;
                success = "Kirjautuminen epäonnistui: Käyttäjä ei löytynyt.";
            }

        }
        else
        {   
            showFail = true;
            success = "Väärä tunnus tai salasana, tarkista!";
            Console.WriteLine("Kirjautuminen epäonnistui.");
        }
    }
    private async Task FetchUserDetails()
    {

        var userResponse = await HttpClient.GetAsync("http://127.0.0.1:8000/api/users/");

        if (userResponse.IsSuccessStatusCode)
        {
            var userContent = await userResponse.Content.ReadAsStringAsync();
            var userDetailsList = JsonConvert.DeserializeObject<List<User>>(userContent);
            var userDetails = userDetailsList?.FirstOrDefault();
            if (userDetails != null)

            {
                User.username = userDetails.username; // Aseta käyttäjänimi
                User.id= userDetails.id;         // Aseta käyttäjän ID
                User.IsLoggedIn = true;                // Aseta kirjautumistila
                
                Console.WriteLine($"Kirjautunut käyttäjä: {userDetails.username}, Etunimi: {userDetails.first_name}, Sukunimi: {userDetails.last_name}");
                NavigationManager.NavigateTo("/feed");
            }
            else
            {
                Console.WriteLine("Käyttäjän tietojen hakeminen epäonnistui: Käyttäjä ei löytynyt.");
            }
        }
        else
        {
            Console.WriteLine("Käyttäjän tietojen hakeminen epäonnistui.");
            NavigationManager.NavigateTo("/feed");
        }
   
    }
}